{
  "roots": [
    "defi",
    "dao",
    "l2",
    "infra",
    "token",
    "nft",
    "gaming",
    "social",
    "identity",
    "privacy",
    "security",
    "wallet",
    "analytics",
    "rwa",
    "supply",
    "health",
    "finance",
    "dev",
    "art",
    "interop"
  ],
  "subcategories": {
    "defi": [
      "amm",
      "lending",
      "stablecoin",
      "yield",
      "perps",
      "options",
      "derivatives",
      "dex-aggregator",
      "asset-management",
      "liquid-staking",
      "cdps",
      "synthetics",
      "insurance"
    ],
    "dao": ["governor", "timelock", "treasury", "voting", "multisig", "module"],
    "l2": [
      "optimistic-rollup",
      "zk-rollup",
      "validium",
      "da-layer",
      "bridge",
      "sequencer",
      "prover"
    ],
    "infra": [
      "oracle",
      "relayer",
      "rpc",
      "indexer",
      "subgraph",
      "event-stream",
      "data-availability"
    ],
    "token": ["erc20", "erc721", "erc1155", "governance-token", "rwa", "wrapped", "bridged"],
    "nft": ["marketplace", "launchpad", "royalty", "metadata", "rental"],
    "gaming": ["nft-game", "engine", "marketplace", "loot", "economy"],
    "social": ["protocol", "messaging", "profile", "feed", "moderation"],
    "identity": ["ens", "did", "attestations", "verifiable-credentials"],
    "privacy": ["mixer", "zk-id", "shielded-pool", "fhe", "mev-protection"],
    "security": ["auditor", "monitoring", "scanning", "incident-response", "bug-bounty"],
    "wallet": ["eoa", "aa-4337", "mpc", "custody", "payment-processor", "onramp", "offramp"],
    "analytics": ["indexer", "dashboard", "analytics-service"],
    "rwa": ["real-estate", "commodities", "treasuries", "invoices"],
    "supply": ["tracking", "verification", "logistics", "compliance"],
    "health": ["medical-records", "data-sharing", "consent"],
    "finance": ["banking", "settlement", "custody", "compliance"],
    "dev": ["framework", "testing", "deployment", "debugging", "plugins"],
    "art": ["platform", "curation", "royalty", "minting"],
    "interop": ["bridge", "messaging", "light-client"]
  },
  "aliases": {
    "infrastructure": "infra",
    "healthcare": "health",
    "payments": "wallet:payment-processor",
    "insurance": "defi:insurance",
    "l2": "l2",
    "tokens": "token",
    "developer": "dev",
    "supplychain": "supply"
  },
  "edgeCases": {
    "circularInheritance": {
      "description": "Prevent circular inheritance in hierarchical schemas",
      "validation": "Detect cycles in inheritance graph",
      "resolution": "Error with specific cycle path"
    },
    "crossChainContracts": {
      "description": "Handle contracts deployed on multiple chains",
      "validation": "Validate chainId consistency across addresses",
      "resolution": "Allow multiple chainIds with proper validation"
    },
    "proxyVariants": {
      "description": "Handle different proxy patterns and implementations",
      "validation": "Validate proxy type and implementation consistency",
      "resolution": "Support all proxy types with specific validation rules"
    },
    "deprecatedFields": {
      "description": "Handle deprecated fields during migration",
      "validation": "Warn about deprecated fields, migrate to new fields",
      "resolution": "Automatic migration with validation"
    },
    "versionConflicts": {
      "description": "Handle version conflicts in inheritance",
      "validation": "Detect version mismatches across hierarchy",
      "resolution": "Use child version with warning"
    },
    "malformedAddresses": {
      "description": "Handle invalid Ethereum addresses",
      "validation": "Validate address format and checksum",
      "resolution": "Reject invalid addresses with specific error"
    },
    "emptyMetadata": {
      "description": "Handle empty or minimal metadata objects",
      "validation": "Require minimum fields for valid metadata",
      "resolution": "Error with guidance on required fields"
    },
    "nullUndefinedValues": {
      "description": "Handle null and undefined values in metadata",
      "validation": "Validate field types and nullability",
      "resolution": "Convert to appropriate defaults or error"
    }
  }
}
